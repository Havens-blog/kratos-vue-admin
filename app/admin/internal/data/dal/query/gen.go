// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		CasbinRule:   newCasbinRule(db, opts...),
		JwtBlacklist: newJwtBlacklist(db, opts...),
		LogJob:       newLogJob(db, opts...),
		LogLogin:     newLogLogin(db, opts...),
		LogOper:      newLogOper(db, opts...),
		SysAPI:       newSysAPI(db, opts...),
		SysDept:      newSysDept(db, opts...),
		SysDictDatum: newSysDictDatum(db, opts...),
		SysDictType:  newSysDictType(db, opts...),
		SysDiscovery: newSysDiscovery(db, opts...),
		SysJob:       newSysJob(db, opts...),
		SysMenu:      newSysMenu(db, opts...),
		SysMenuBtn:   newSysMenuBtn(db, opts...),
		SysPost:      newSysPost(db, opts...),
		SysRole:      newSysRole(db, opts...),
		SysRoleBtn:   newSysRoleBtn(db, opts...),
		SysRoleDept:  newSysRoleDept(db, opts...),
		SysRoleMenu:  newSysRoleMenu(db, opts...),
		SysUser:      newSysUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	CasbinRule   casbinRule
	JwtBlacklist jwtBlacklist
	LogJob       logJob
	LogLogin     logLogin
	LogOper      logOper
	SysAPI       sysAPI
	SysDept      sysDept
	SysDictDatum sysDictDatum
	SysDictType  sysDictType
	SysDiscovery sysDiscovery
	SysJob       sysJob
	SysMenu      sysMenu
	SysMenuBtn   sysMenuBtn
	SysPost      sysPost
	SysRole      sysRole
	SysRoleBtn   sysRoleBtn
	SysRoleDept  sysRoleDept
	SysRoleMenu  sysRoleMenu
	SysUser      sysUser
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		CasbinRule:   q.CasbinRule.clone(db),
		JwtBlacklist: q.JwtBlacklist.clone(db),
		LogJob:       q.LogJob.clone(db),
		LogLogin:     q.LogLogin.clone(db),
		LogOper:      q.LogOper.clone(db),
		SysAPI:       q.SysAPI.clone(db),
		SysDept:      q.SysDept.clone(db),
		SysDictDatum: q.SysDictDatum.clone(db),
		SysDictType:  q.SysDictType.clone(db),
		SysDiscovery: q.SysDiscovery.clone(db),
		SysJob:       q.SysJob.clone(db),
		SysMenu:      q.SysMenu.clone(db),
		SysMenuBtn:   q.SysMenuBtn.clone(db),
		SysPost:      q.SysPost.clone(db),
		SysRole:      q.SysRole.clone(db),
		SysRoleBtn:   q.SysRoleBtn.clone(db),
		SysRoleDept:  q.SysRoleDept.clone(db),
		SysRoleMenu:  q.SysRoleMenu.clone(db),
		SysUser:      q.SysUser.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		CasbinRule:   q.CasbinRule.replaceDB(db),
		JwtBlacklist: q.JwtBlacklist.replaceDB(db),
		LogJob:       q.LogJob.replaceDB(db),
		LogLogin:     q.LogLogin.replaceDB(db),
		LogOper:      q.LogOper.replaceDB(db),
		SysAPI:       q.SysAPI.replaceDB(db),
		SysDept:      q.SysDept.replaceDB(db),
		SysDictDatum: q.SysDictDatum.replaceDB(db),
		SysDictType:  q.SysDictType.replaceDB(db),
		SysDiscovery: q.SysDiscovery.replaceDB(db),
		SysJob:       q.SysJob.replaceDB(db),
		SysMenu:      q.SysMenu.replaceDB(db),
		SysMenuBtn:   q.SysMenuBtn.replaceDB(db),
		SysPost:      q.SysPost.replaceDB(db),
		SysRole:      q.SysRole.replaceDB(db),
		SysRoleBtn:   q.SysRoleBtn.replaceDB(db),
		SysRoleDept:  q.SysRoleDept.replaceDB(db),
		SysRoleMenu:  q.SysRoleMenu.replaceDB(db),
		SysUser:      q.SysUser.replaceDB(db),
	}
}

type queryCtx struct {
	CasbinRule   *casbinRuleDo
	JwtBlacklist *jwtBlacklistDo
	LogJob       *logJobDo
	LogLogin     *logLoginDo
	LogOper      *logOperDo
	SysAPI       *sysAPIDo
	SysDept      *sysDeptDo
	SysDictDatum *sysDictDatumDo
	SysDictType  *sysDictTypeDo
	SysDiscovery *sysDiscoveryDo
	SysJob       *sysJobDo
	SysMenu      *sysMenuDo
	SysMenuBtn   *sysMenuBtnDo
	SysPost      *sysPostDo
	SysRole      *sysRoleDo
	SysRoleBtn   *sysRoleBtnDo
	SysRoleDept  *sysRoleDeptDo
	SysRoleMenu  *sysRoleMenuDo
	SysUser      *sysUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		CasbinRule:   q.CasbinRule.WithContext(ctx),
		JwtBlacklist: q.JwtBlacklist.WithContext(ctx),
		LogJob:       q.LogJob.WithContext(ctx),
		LogLogin:     q.LogLogin.WithContext(ctx),
		LogOper:      q.LogOper.WithContext(ctx),
		SysAPI:       q.SysAPI.WithContext(ctx),
		SysDept:      q.SysDept.WithContext(ctx),
		SysDictDatum: q.SysDictDatum.WithContext(ctx),
		SysDictType:  q.SysDictType.WithContext(ctx),
		SysDiscovery: q.SysDiscovery.WithContext(ctx),
		SysJob:       q.SysJob.WithContext(ctx),
		SysMenu:      q.SysMenu.WithContext(ctx),
		SysMenuBtn:   q.SysMenuBtn.WithContext(ctx),
		SysPost:      q.SysPost.WithContext(ctx),
		SysRole:      q.SysRole.WithContext(ctx),
		SysRoleBtn:   q.SysRoleBtn.WithContext(ctx),
		SysRoleDept:  q.SysRoleDept.WithContext(ctx),
		SysRoleMenu:  q.SysRoleMenu.WithContext(ctx),
		SysUser:      q.SysUser.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
