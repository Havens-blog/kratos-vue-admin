// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"github.com/byteflowteam/kratos-vue-admin/app/admin/internal/data/dal/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSysPost(db *gorm.DB, opts ...gen.DOOption) sysPost {
	_sysPost := sysPost{}

	_sysPost.sysPostDo.UseDB(db, opts...)
	_sysPost.sysPostDo.UseModel(&model.SysPost{})

	tableName := _sysPost.sysPostDo.TableName()
	_sysPost.ALL = field.NewAsterisk(tableName)
	_sysPost.ID = field.NewInt64(tableName, "id")
	_sysPost.PostName = field.NewString(tableName, "post_name")
	_sysPost.PostCode = field.NewString(tableName, "post_code")
	_sysPost.Sort = field.NewInt32(tableName, "sort")
	_sysPost.Status = field.NewInt32(tableName, "status")
	_sysPost.Remark = field.NewString(tableName, "remark")
	_sysPost.CreateBy = field.NewString(tableName, "create_by")
	_sysPost.UpdateBy = field.NewString(tableName, "update_by")
	_sysPost.CreatedAt = field.NewTime(tableName, "created_at")
	_sysPost.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sysPost.DeletedAt = field.NewField(tableName, "deleted_at")

	_sysPost.fillFieldMap()

	return _sysPost
}

type sysPost struct {
	sysPostDo sysPostDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键id
	PostName  field.String // 岗位名称
	PostCode  field.String // 岗位代码
	Sort      field.Int32  // 岗位排序
	Status    field.Int32  // 状态 1=正常 2=冻结
	Remark    field.String // 描述
	CreateBy  field.String // 创建人
	UpdateBy  field.String // 修改人
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s sysPost) Table(newTableName string) *sysPost {
	s.sysPostDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysPost) As(alias string) *sysPost {
	s.sysPostDo.DO = *(s.sysPostDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysPost) updateTableName(table string) *sysPost {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.PostName = field.NewString(table, "post_name")
	s.PostCode = field.NewString(table, "post_code")
	s.Sort = field.NewInt32(table, "sort")
	s.Status = field.NewInt32(table, "status")
	s.Remark = field.NewString(table, "remark")
	s.CreateBy = field.NewString(table, "create_by")
	s.UpdateBy = field.NewString(table, "update_by")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *sysPost) WithContext(ctx context.Context) *sysPostDo { return s.sysPostDo.WithContext(ctx) }

func (s sysPost) TableName() string { return s.sysPostDo.TableName() }

func (s sysPost) Alias() string { return s.sysPostDo.Alias() }

func (s *sysPost) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysPost) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["post_name"] = s.PostName
	s.fieldMap["post_code"] = s.PostCode
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["status"] = s.Status
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s sysPost) clone(db *gorm.DB) sysPost {
	s.sysPostDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysPost) replaceDB(db *gorm.DB) sysPost {
	s.sysPostDo.ReplaceDB(db)
	return s
}

type sysPostDo struct{ gen.DO }

func (s sysPostDo) Debug() *sysPostDo {
	return s.withDO(s.DO.Debug())
}

func (s sysPostDo) WithContext(ctx context.Context) *sysPostDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysPostDo) ReadDB() *sysPostDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysPostDo) WriteDB() *sysPostDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysPostDo) Session(config *gorm.Session) *sysPostDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysPostDo) Clauses(conds ...clause.Expression) *sysPostDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysPostDo) Returning(value interface{}, columns ...string) *sysPostDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysPostDo) Not(conds ...gen.Condition) *sysPostDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysPostDo) Or(conds ...gen.Condition) *sysPostDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysPostDo) Select(conds ...field.Expr) *sysPostDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysPostDo) Where(conds ...gen.Condition) *sysPostDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysPostDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *sysPostDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysPostDo) Order(conds ...field.Expr) *sysPostDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysPostDo) Distinct(cols ...field.Expr) *sysPostDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysPostDo) Omit(cols ...field.Expr) *sysPostDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysPostDo) Join(table schema.Tabler, on ...field.Expr) *sysPostDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysPostDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysPostDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysPostDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysPostDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysPostDo) Group(cols ...field.Expr) *sysPostDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysPostDo) Having(conds ...gen.Condition) *sysPostDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysPostDo) Limit(limit int) *sysPostDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysPostDo) Offset(offset int) *sysPostDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysPostDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysPostDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysPostDo) Unscoped() *sysPostDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysPostDo) Create(values ...*model.SysPost) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysPostDo) CreateInBatches(values []*model.SysPost, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysPostDo) Save(values ...*model.SysPost) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysPostDo) First() (*model.SysPost, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysPost), nil
	}
}

func (s sysPostDo) Take() (*model.SysPost, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysPost), nil
	}
}

func (s sysPostDo) Last() (*model.SysPost, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysPost), nil
	}
}

func (s sysPostDo) Find() ([]*model.SysPost, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysPost), err
}

func (s sysPostDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysPost, err error) {
	buf := make([]*model.SysPost, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysPostDo) FindInBatches(result *[]*model.SysPost, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysPostDo) Attrs(attrs ...field.AssignExpr) *sysPostDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysPostDo) Assign(attrs ...field.AssignExpr) *sysPostDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysPostDo) Joins(fields ...field.RelationField) *sysPostDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysPostDo) Preload(fields ...field.RelationField) *sysPostDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysPostDo) FirstOrInit() (*model.SysPost, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysPost), nil
	}
}

func (s sysPostDo) FirstOrCreate() (*model.SysPost, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysPost), nil
	}
}

func (s sysPostDo) FindByPage(offset int, limit int) (result []*model.SysPost, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysPostDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysPostDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysPostDo) Delete(models ...*model.SysPost) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysPostDo) withDO(do gen.Dao) *sysPostDo {
	s.DO = *do.(*gen.DO)
	return s
}
