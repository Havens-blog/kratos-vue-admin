// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/modelop/service/v1/modelop.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Modelop_CreateModelop_FullMethodName = "/api.modelop.service.v1.Modelop/CreateModelop"
	Modelop_UpdateModelop_FullMethodName = "/api.modelop.service.v1.Modelop/UpdateModelop"
	Modelop_DeleteModelop_FullMethodName = "/api.modelop.service.v1.Modelop/DeleteModelop"
	Modelop_GetModelop_FullMethodName    = "/api.modelop.service.v1.Modelop/GetModelop"
	Modelop_ListModelop_FullMethodName   = "/api.modelop.service.v1.Modelop/ListModelop"
)

// ModelopClient is the client API for Modelop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelopClient interface {
	CreateModelop(ctx context.Context, in *CreateModelopRequest, opts ...grpc.CallOption) (*CreateModelopReply, error)
	UpdateModelop(ctx context.Context, in *UpdateModelopRequest, opts ...grpc.CallOption) (*UpdateModelopReply, error)
	DeleteModelop(ctx context.Context, in *DeleteModelopRequest, opts ...grpc.CallOption) (*DeleteModelopReply, error)
	GetModelop(ctx context.Context, in *GetModelopRequest, opts ...grpc.CallOption) (*GetModelopReply, error)
	ListModelop(ctx context.Context, in *ListModelopRequest, opts ...grpc.CallOption) (*ListModelopReply, error)
}

type modelopClient struct {
	cc grpc.ClientConnInterface
}

func NewModelopClient(cc grpc.ClientConnInterface) ModelopClient {
	return &modelopClient{cc}
}

func (c *modelopClient) CreateModelop(ctx context.Context, in *CreateModelopRequest, opts ...grpc.CallOption) (*CreateModelopReply, error) {
	out := new(CreateModelopReply)
	err := c.cc.Invoke(ctx, Modelop_CreateModelop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelopClient) UpdateModelop(ctx context.Context, in *UpdateModelopRequest, opts ...grpc.CallOption) (*UpdateModelopReply, error) {
	out := new(UpdateModelopReply)
	err := c.cc.Invoke(ctx, Modelop_UpdateModelop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelopClient) DeleteModelop(ctx context.Context, in *DeleteModelopRequest, opts ...grpc.CallOption) (*DeleteModelopReply, error) {
	out := new(DeleteModelopReply)
	err := c.cc.Invoke(ctx, Modelop_DeleteModelop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelopClient) GetModelop(ctx context.Context, in *GetModelopRequest, opts ...grpc.CallOption) (*GetModelopReply, error) {
	out := new(GetModelopReply)
	err := c.cc.Invoke(ctx, Modelop_GetModelop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelopClient) ListModelop(ctx context.Context, in *ListModelopRequest, opts ...grpc.CallOption) (*ListModelopReply, error) {
	out := new(ListModelopReply)
	err := c.cc.Invoke(ctx, Modelop_ListModelop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelopServer is the server API for Modelop service.
// All implementations must embed UnimplementedModelopServer
// for forward compatibility
type ModelopServer interface {
	CreateModelop(context.Context, *CreateModelopRequest) (*CreateModelopReply, error)
	UpdateModelop(context.Context, *UpdateModelopRequest) (*UpdateModelopReply, error)
	DeleteModelop(context.Context, *DeleteModelopRequest) (*DeleteModelopReply, error)
	GetModelop(context.Context, *GetModelopRequest) (*GetModelopReply, error)
	ListModelop(context.Context, *ListModelopRequest) (*ListModelopReply, error)
	mustEmbedUnimplementedModelopServer()
}

// UnimplementedModelopServer must be embedded to have forward compatible implementations.
type UnimplementedModelopServer struct {
}

func (UnimplementedModelopServer) CreateModelop(context.Context, *CreateModelopRequest) (*CreateModelopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModelop not implemented")
}
func (UnimplementedModelopServer) UpdateModelop(context.Context, *UpdateModelopRequest) (*UpdateModelopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModelop not implemented")
}
func (UnimplementedModelopServer) DeleteModelop(context.Context, *DeleteModelopRequest) (*DeleteModelopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModelop not implemented")
}
func (UnimplementedModelopServer) GetModelop(context.Context, *GetModelopRequest) (*GetModelopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelop not implemented")
}
func (UnimplementedModelopServer) ListModelop(context.Context, *ListModelopRequest) (*ListModelopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModelop not implemented")
}
func (UnimplementedModelopServer) mustEmbedUnimplementedModelopServer() {}

// UnsafeModelopServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelopServer will
// result in compilation errors.
type UnsafeModelopServer interface {
	mustEmbedUnimplementedModelopServer()
}

func RegisterModelopServer(s grpc.ServiceRegistrar, srv ModelopServer) {
	s.RegisterService(&Modelop_ServiceDesc, srv)
}

func _Modelop_CreateModelop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelopServer).CreateModelop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Modelop_CreateModelop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelopServer).CreateModelop(ctx, req.(*CreateModelopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Modelop_UpdateModelop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModelopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelopServer).UpdateModelop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Modelop_UpdateModelop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelopServer).UpdateModelop(ctx, req.(*UpdateModelopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Modelop_DeleteModelop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelopServer).DeleteModelop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Modelop_DeleteModelop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelopServer).DeleteModelop(ctx, req.(*DeleteModelopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Modelop_GetModelop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelopServer).GetModelop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Modelop_GetModelop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelopServer).GetModelop(ctx, req.(*GetModelopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Modelop_ListModelop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelopServer).ListModelop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Modelop_ListModelop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelopServer).ListModelop(ctx, req.(*ListModelopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Modelop_ServiceDesc is the grpc.ServiceDesc for Modelop service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Modelop_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.modelop.service.v1.Modelop",
	HandlerType: (*ModelopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateModelop",
			Handler:    _Modelop_CreateModelop_Handler,
		},
		{
			MethodName: "UpdateModelop",
			Handler:    _Modelop_UpdateModelop_Handler,
		},
		{
			MethodName: "DeleteModelop",
			Handler:    _Modelop_DeleteModelop_Handler,
		},
		{
			MethodName: "GetModelop",
			Handler:    _Modelop_GetModelop_Handler,
		},
		{
			MethodName: "ListModelop",
			Handler:    _Modelop_ListModelop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/modelop/service/v1/modelop.proto",
}
