// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dicttype.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateDictTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDictTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictTypeRequestMultiError, or nil if none found.
func (m *CreateDictTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DictName

	// no validation rules for DictType

	// no validation rules for Status

	// no validation rules for Remark

	if len(errors) > 0 {
		return CreateDictTypeRequestMultiError(errors)
	}

	return nil
}

// CreateDictTypeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDictTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDictTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictTypeRequestMultiError) AllErrors() []error { return m }

// CreateDictTypeRequestValidationError is the validation error returned by
// CreateDictTypeRequest.Validate if the designated constraints aren't met.
type CreateDictTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictTypeRequestValidationError) ErrorName() string {
	return "CreateDictTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDictTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictTypeRequestValidationError{}

// Validate checks the field values on CreateDictTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDictTypeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictTypeReplyMultiError, or nil if none found.
func (m *CreateDictTypeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictTypeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateDictTypeReplyMultiError(errors)
	}

	return nil
}

// CreateDictTypeReplyMultiError is an error wrapping multiple validation
// errors returned by CreateDictTypeReply.ValidateAll() if the designated
// constraints aren't met.
type CreateDictTypeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictTypeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictTypeReplyMultiError) AllErrors() []error { return m }

// CreateDictTypeReplyValidationError is the validation error returned by
// CreateDictTypeReply.Validate if the designated constraints aren't met.
type CreateDictTypeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictTypeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictTypeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictTypeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictTypeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictTypeReplyValidationError) ErrorName() string {
	return "CreateDictTypeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDictTypeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictTypeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictTypeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictTypeReplyValidationError{}

// Validate checks the field values on UpdateDictTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictTypeRequestMultiError, or nil if none found.
func (m *UpdateDictTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DictId

	// no validation rules for DictName

	// no validation rules for DictType

	// no validation rules for Status

	// no validation rules for CreateBy

	// no validation rules for UpdateBy

	// no validation rules for Remark

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDictTypeRequestValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDictTypeRequestValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDictTypeRequestValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDictTypeRequestValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDictTypeRequestValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDictTypeRequestValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDictTypeRequestMultiError(errors)
	}

	return nil
}

// UpdateDictTypeRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDictTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDictTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictTypeRequestMultiError) AllErrors() []error { return m }

// UpdateDictTypeRequestValidationError is the validation error returned by
// UpdateDictTypeRequest.Validate if the designated constraints aren't met.
type UpdateDictTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictTypeRequestValidationError) ErrorName() string {
	return "UpdateDictTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictTypeRequestValidationError{}

// Validate checks the field values on UpdateDictTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictTypeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictTypeReplyMultiError, or nil if none found.
func (m *UpdateDictTypeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictTypeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DictId

	if len(errors) > 0 {
		return UpdateDictTypeReplyMultiError(errors)
	}

	return nil
}

// UpdateDictTypeReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateDictTypeReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateDictTypeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictTypeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictTypeReplyMultiError) AllErrors() []error { return m }

// UpdateDictTypeReplyValidationError is the validation error returned by
// UpdateDictTypeReply.Validate if the designated constraints aren't met.
type UpdateDictTypeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictTypeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictTypeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictTypeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictTypeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictTypeReplyValidationError) ErrorName() string {
	return "UpdateDictTypeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictTypeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictTypeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictTypeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictTypeReplyValidationError{}

// Validate checks the field values on DeleteDictTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDictTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDictTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDictTypeRequestMultiError, or nil if none found.
func (m *DeleteDictTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDictTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DictId

	if len(errors) > 0 {
		return DeleteDictTypeRequestMultiError(errors)
	}

	return nil
}

// DeleteDictTypeRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDictTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDictTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDictTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDictTypeRequestMultiError) AllErrors() []error { return m }

// DeleteDictTypeRequestValidationError is the validation error returned by
// DeleteDictTypeRequest.Validate if the designated constraints aren't met.
type DeleteDictTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictTypeRequestValidationError) ErrorName() string {
	return "DeleteDictTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDictTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictTypeRequestValidationError{}

// Validate checks the field values on DeleteDictTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDictTypeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDictTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDictTypeReplyMultiError, or nil if none found.
func (m *DeleteDictTypeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDictTypeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DictId

	if len(errors) > 0 {
		return DeleteDictTypeReplyMultiError(errors)
	}

	return nil
}

// DeleteDictTypeReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteDictTypeReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteDictTypeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDictTypeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDictTypeReplyMultiError) AllErrors() []error { return m }

// DeleteDictTypeReplyValidationError is the validation error returned by
// DeleteDictTypeReply.Validate if the designated constraints aren't met.
type DeleteDictTypeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictTypeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictTypeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictTypeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictTypeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictTypeReplyValidationError) ErrorName() string {
	return "DeleteDictTypeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDictTypeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictTypeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictTypeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictTypeReplyValidationError{}

// Validate checks the field values on GetDictTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDictTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDictTypeRequestMultiError, or nil if none found.
func (m *GetDictTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DictId

	if len(errors) > 0 {
		return GetDictTypeRequestMultiError(errors)
	}

	return nil
}

// GetDictTypeRequestMultiError is an error wrapping multiple validation errors
// returned by GetDictTypeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDictTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictTypeRequestMultiError) AllErrors() []error { return m }

// GetDictTypeRequestValidationError is the validation error returned by
// GetDictTypeRequest.Validate if the designated constraints aren't met.
type GetDictTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictTypeRequestValidationError) ErrorName() string {
	return "GetDictTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDictTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictTypeRequestValidationError{}

// Validate checks the field values on GetDictTypeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDictTypeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDictTypeReplyMultiError, or nil if none found.
func (m *GetDictTypeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictTypeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DictId

	if len(errors) > 0 {
		return GetDictTypeReplyMultiError(errors)
	}

	return nil
}

// GetDictTypeReplyMultiError is an error wrapping multiple validation errors
// returned by GetDictTypeReply.ValidateAll() if the designated constraints
// aren't met.
type GetDictTypeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictTypeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictTypeReplyMultiError) AllErrors() []error { return m }

// GetDictTypeReplyValidationError is the validation error returned by
// GetDictTypeReply.Validate if the designated constraints aren't met.
type GetDictTypeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictTypeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictTypeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictTypeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictTypeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictTypeReplyValidationError) ErrorName() string { return "GetDictTypeReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetDictTypeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictTypeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictTypeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictTypeReplyValidationError{}

// Validate checks the field values on ListDictTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDictTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDictTypeRequestMultiError, or nil if none found.
func (m *ListDictTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DictName

	// no validation rules for DictType

	// no validation rules for Status

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListDictTypeRequestMultiError(errors)
	}

	return nil
}

// ListDictTypeRequestMultiError is an error wrapping multiple validation
// errors returned by ListDictTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDictTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictTypeRequestMultiError) AllErrors() []error { return m }

// ListDictTypeRequestValidationError is the validation error returned by
// ListDictTypeRequest.Validate if the designated constraints aren't met.
type ListDictTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictTypeRequestValidationError) ErrorName() string {
	return "ListDictTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDictTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictTypeRequestValidationError{}

// Validate checks the field values on ListDictTypeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDictTypeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDictTypeReplyMultiError, or nil if none found.
func (m *ListDictTypeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictTypeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for PageNum

	// no validation rules for PageSize

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDictTypeReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDictTypeReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDictTypeReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDictTypeReplyMultiError(errors)
	}

	return nil
}

// ListDictTypeReplyMultiError is an error wrapping multiple validation errors
// returned by ListDictTypeReply.ValidateAll() if the designated constraints
// aren't met.
type ListDictTypeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictTypeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictTypeReplyMultiError) AllErrors() []error { return m }

// ListDictTypeReplyValidationError is the validation error returned by
// ListDictTypeReply.Validate if the designated constraints aren't met.
type ListDictTypeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictTypeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictTypeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictTypeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictTypeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictTypeReplyValidationError) ErrorName() string {
	return "ListDictTypeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListDictTypeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictTypeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictTypeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictTypeReplyValidationError{}

// Validate checks the field values on DictTypeContent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DictTypeContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DictTypeContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DictTypeContentMultiError, or nil if none found.
func (m *DictTypeContent) ValidateAll() error {
	return m.validate(true)
}

func (m *DictTypeContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DictId

	// no validation rules for DictName

	// no validation rules for DictType

	// no validation rules for Status

	// no validation rules for CreateBy

	// no validation rules for UpdateBy

	// no validation rules for Remark

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DictTypeContentValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DictTypeContentValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DictTypeContentValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DictTypeContentValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DictTypeContentValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DictTypeContentValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DictTypeContentMultiError(errors)
	}

	return nil
}

// DictTypeContentMultiError is an error wrapping multiple validation errors
// returned by DictTypeContent.ValidateAll() if the designated constraints
// aren't met.
type DictTypeContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DictTypeContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DictTypeContentMultiError) AllErrors() []error { return m }

// DictTypeContentValidationError is the validation error returned by
// DictTypeContent.Validate if the designated constraints aren't met.
type DictTypeContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictTypeContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictTypeContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictTypeContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictTypeContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictTypeContentValidationError) ErrorName() string { return "DictTypeContentValidationError" }

// Error satisfies the builtin error interface
func (e DictTypeContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictTypeContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictTypeContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictTypeContentValidationError{}

// Validate checks the field values on GetDesignateDictTypesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDesignateDictTypesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDesignateDictTypesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDesignateDictTypesRequestMultiError, or nil if none found.
func (m *GetDesignateDictTypesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDesignateDictTypesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDesignateDictTypesRequestMultiError(errors)
	}

	return nil
}

// GetDesignateDictTypesRequestMultiError is an error wrapping multiple
// validation errors returned by GetDesignateDictTypesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDesignateDictTypesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDesignateDictTypesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDesignateDictTypesRequestMultiError) AllErrors() []error { return m }

// GetDesignateDictTypesRequestValidationError is the validation error returned
// by GetDesignateDictTypesRequest.Validate if the designated constraints
// aren't met.
type GetDesignateDictTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDesignateDictTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDesignateDictTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDesignateDictTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDesignateDictTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDesignateDictTypesRequestValidationError) ErrorName() string {
	return "GetDesignateDictTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDesignateDictTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDesignateDictTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDesignateDictTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDesignateDictTypesRequestValidationError{}

// Validate checks the field values on GetDesignateDictTypesReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDesignateDictTypesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDesignateDictTypesReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDesignateDictTypesReplyMultiError, or nil if none found.
func (m *GetDesignateDictTypesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDesignateDictTypesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDesignateDictTypesReplyMultiError(errors)
	}

	return nil
}

// GetDesignateDictTypesReplyMultiError is an error wrapping multiple
// validation errors returned by GetDesignateDictTypesReply.ValidateAll() if
// the designated constraints aren't met.
type GetDesignateDictTypesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDesignateDictTypesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDesignateDictTypesReplyMultiError) AllErrors() []error { return m }

// GetDesignateDictTypesReplyValidationError is the validation error returned
// by GetDesignateDictTypesReply.Validate if the designated constraints aren't met.
type GetDesignateDictTypesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDesignateDictTypesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDesignateDictTypesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDesignateDictTypesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDesignateDictTypesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDesignateDictTypesReplyValidationError) ErrorName() string {
	return "GetDesignateDictTypesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetDesignateDictTypesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDesignateDictTypesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDesignateDictTypesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDesignateDictTypesReplyValidationError{}
