// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: menus.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RoleMenuTreeSelectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleMenuTreeSelectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleMenuTreeSelectRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleMenuTreeSelectRequestMultiError, or nil if none found.
func (m *RoleMenuTreeSelectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleMenuTreeSelectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return RoleMenuTreeSelectRequestMultiError(errors)
	}

	return nil
}

// RoleMenuTreeSelectRequestMultiError is an error wrapping multiple validation
// errors returned by RoleMenuTreeSelectRequest.ValidateAll() if the
// designated constraints aren't met.
type RoleMenuTreeSelectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMenuTreeSelectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMenuTreeSelectRequestMultiError) AllErrors() []error { return m }

// RoleMenuTreeSelectRequestValidationError is the validation error returned by
// RoleMenuTreeSelectRequest.Validate if the designated constraints aren't met.
type RoleMenuTreeSelectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleMenuTreeSelectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleMenuTreeSelectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleMenuTreeSelectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleMenuTreeSelectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleMenuTreeSelectRequestValidationError) ErrorName() string {
	return "RoleMenuTreeSelectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoleMenuTreeSelectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleMenuTreeSelectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleMenuTreeSelectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleMenuTreeSelectRequestValidationError{}

// Validate checks the field values on RoleMenuTreeSelectReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleMenuTreeSelectReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleMenuTreeSelectReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleMenuTreeSelectReplyMultiError, or nil if none found.
func (m *RoleMenuTreeSelectReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleMenuTreeSelectReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMenus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleMenuTreeSelectReplyValidationError{
						field:  fmt.Sprintf("Menus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleMenuTreeSelectReplyValidationError{
						field:  fmt.Sprintf("Menus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleMenuTreeSelectReplyValidationError{
					field:  fmt.Sprintf("Menus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RoleMenuTreeSelectReplyMultiError(errors)
	}

	return nil
}

// RoleMenuTreeSelectReplyMultiError is an error wrapping multiple validation
// errors returned by RoleMenuTreeSelectReply.ValidateAll() if the designated
// constraints aren't met.
type RoleMenuTreeSelectReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMenuTreeSelectReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMenuTreeSelectReplyMultiError) AllErrors() []error { return m }

// RoleMenuTreeSelectReplyValidationError is the validation error returned by
// RoleMenuTreeSelectReply.Validate if the designated constraints aren't met.
type RoleMenuTreeSelectReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleMenuTreeSelectReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleMenuTreeSelectReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleMenuTreeSelectReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleMenuTreeSelectReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleMenuTreeSelectReplyValidationError) ErrorName() string {
	return "RoleMenuTreeSelectReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RoleMenuTreeSelectReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleMenuTreeSelectReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleMenuTreeSelectReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleMenuTreeSelectReplyValidationError{}

// Validate checks the field values on MenuLabel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MenuLabel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuLabel with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MenuLabelMultiError, or nil
// if none found.
func (m *MenuLabel) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuLabel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MenuId

	// no validation rules for MenuName

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MenuLabelValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MenuLabelValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MenuLabelValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MenuLabelMultiError(errors)
	}

	return nil
}

// MenuLabelMultiError is an error wrapping multiple validation errors returned
// by MenuLabel.ValidateAll() if the designated constraints aren't met.
type MenuLabelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuLabelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuLabelMultiError) AllErrors() []error { return m }

// MenuLabelValidationError is the validation error returned by
// MenuLabel.Validate if the designated constraints aren't met.
type MenuLabelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuLabelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuLabelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuLabelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuLabelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuLabelValidationError) ErrorName() string { return "MenuLabelValidationError" }

// Error satisfies the builtin error interface
func (e MenuLabelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuLabel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuLabelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuLabelValidationError{}

// Validate checks the field values on CreateMenusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMenusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMenusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMenusRequestMultiError, or nil if none found.
func (m *CreateMenusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMenusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MenuName

	// no validation rules for Title

	// no validation rules for ParentId

	// no validation rules for Sort

	// no validation rules for Icon

	// no validation rules for Path

	// no validation rules for Component

	// no validation rules for IsIframe

	// no validation rules for IsLink

	// no validation rules for MenuType

	// no validation rules for IsHide

	// no validation rules for IsKeepAlive

	// no validation rules for IsAffix

	// no validation rules for Permission

	// no validation rules for Status

	// no validation rules for Remark

	if len(errors) > 0 {
		return CreateMenusRequestMultiError(errors)
	}

	return nil
}

// CreateMenusRequestMultiError is an error wrapping multiple validation errors
// returned by CreateMenusRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateMenusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMenusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMenusRequestMultiError) AllErrors() []error { return m }

// CreateMenusRequestValidationError is the validation error returned by
// CreateMenusRequest.Validate if the designated constraints aren't met.
type CreateMenusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMenusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMenusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMenusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMenusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMenusRequestValidationError) ErrorName() string {
	return "CreateMenusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMenusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMenusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMenusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMenusRequestValidationError{}

// Validate checks the field values on CreateMenusReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateMenusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMenusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMenusReplyMultiError, or nil if none found.
func (m *CreateMenusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMenusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMenus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateMenusReplyValidationError{
						field:  fmt.Sprintf("Menus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateMenusReplyValidationError{
						field:  fmt.Sprintf("Menus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMenusReplyValidationError{
					field:  fmt.Sprintf("Menus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateMenusReplyMultiError(errors)
	}

	return nil
}

// CreateMenusReplyMultiError is an error wrapping multiple validation errors
// returned by CreateMenusReply.ValidateAll() if the designated constraints
// aren't met.
type CreateMenusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMenusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMenusReplyMultiError) AllErrors() []error { return m }

// CreateMenusReplyValidationError is the validation error returned by
// CreateMenusReply.Validate if the designated constraints aren't met.
type CreateMenusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMenusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMenusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMenusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMenusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMenusReplyValidationError) ErrorName() string { return "CreateMenusReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateMenusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMenusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMenusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMenusReplyValidationError{}

// Validate checks the field values on UpdateMenusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMenusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMenusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMenusRequestMultiError, or nil if none found.
func (m *UpdateMenusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMenusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MenuId

	// no validation rules for MenuName

	// no validation rules for Title

	// no validation rules for ParentId

	// no validation rules for Sort

	// no validation rules for Icon

	// no validation rules for Path

	// no validation rules for Component

	// no validation rules for IsIframe

	// no validation rules for IsLink

	// no validation rules for MenuType

	// no validation rules for IsHide

	// no validation rules for IsKeepAlive

	// no validation rules for IsAffix

	// no validation rules for Permission

	// no validation rules for Status

	// no validation rules for Remark

	if len(errors) > 0 {
		return UpdateMenusRequestMultiError(errors)
	}

	return nil
}

// UpdateMenusRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateMenusRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateMenusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMenusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMenusRequestMultiError) AllErrors() []error { return m }

// UpdateMenusRequestValidationError is the validation error returned by
// UpdateMenusRequest.Validate if the designated constraints aren't met.
type UpdateMenusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMenusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMenusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMenusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMenusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMenusRequestValidationError) ErrorName() string {
	return "UpdateMenusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMenusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMenusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMenusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMenusRequestValidationError{}

// Validate checks the field values on UpdateMenusReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateMenusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMenusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMenusReplyMultiError, or nil if none found.
func (m *UpdateMenusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMenusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMenus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateMenusReplyValidationError{
						field:  fmt.Sprintf("Menus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateMenusReplyValidationError{
						field:  fmt.Sprintf("Menus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateMenusReplyValidationError{
					field:  fmt.Sprintf("Menus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateMenusReplyMultiError(errors)
	}

	return nil
}

// UpdateMenusReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateMenusReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateMenusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMenusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMenusReplyMultiError) AllErrors() []error { return m }

// UpdateMenusReplyValidationError is the validation error returned by
// UpdateMenusReply.Validate if the designated constraints aren't met.
type UpdateMenusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMenusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMenusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMenusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMenusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMenusReplyValidationError) ErrorName() string { return "UpdateMenusReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateMenusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMenusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMenusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMenusReplyValidationError{}

// Validate checks the field values on DeleteMenusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMenusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMenusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMenusRequestMultiError, or nil if none found.
func (m *DeleteMenusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMenusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteMenusRequestMultiError(errors)
	}

	return nil
}

// DeleteMenusRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteMenusRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteMenusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMenusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMenusRequestMultiError) AllErrors() []error { return m }

// DeleteMenusRequestValidationError is the validation error returned by
// DeleteMenusRequest.Validate if the designated constraints aren't met.
type DeleteMenusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMenusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMenusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMenusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMenusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMenusRequestValidationError) ErrorName() string {
	return "DeleteMenusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMenusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMenusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMenusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMenusRequestValidationError{}

// Validate checks the field values on DeleteMenusReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteMenusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMenusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMenusReplyMultiError, or nil if none found.
func (m *DeleteMenusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMenusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMenusReplyMultiError(errors)
	}

	return nil
}

// DeleteMenusReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteMenusReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteMenusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMenusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMenusReplyMultiError) AllErrors() []error { return m }

// DeleteMenusReplyValidationError is the validation error returned by
// DeleteMenusReply.Validate if the designated constraints aren't met.
type DeleteMenusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMenusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMenusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMenusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMenusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMenusReplyValidationError) ErrorName() string { return "DeleteMenusReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteMenusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMenusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMenusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMenusReplyValidationError{}

// Validate checks the field values on GetMenusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMenusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMenusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMenusRequestMultiError, or nil if none found.
func (m *GetMenusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMenusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetMenusRequestMultiError(errors)
	}

	return nil
}

// GetMenusRequestMultiError is an error wrapping multiple validation errors
// returned by GetMenusRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMenusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMenusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMenusRequestMultiError) AllErrors() []error { return m }

// GetMenusRequestValidationError is the validation error returned by
// GetMenusRequest.Validate if the designated constraints aren't met.
type GetMenusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMenusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMenusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMenusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMenusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMenusRequestValidationError) ErrorName() string { return "GetMenusRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetMenusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMenusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMenusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMenusRequestValidationError{}

// Validate checks the field values on GetMenusReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMenusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMenusReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMenusReplyMultiError, or
// nil if none found.
func (m *GetMenusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMenusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MenuId

	// no validation rules for MenuName

	// no validation rules for Title

	// no validation rules for ParentId

	// no validation rules for Sort

	// no validation rules for Icon

	// no validation rules for Path

	// no validation rules for Component

	// no validation rules for IsIframe

	// no validation rules for IsLink

	// no validation rules for MenuType

	// no validation rules for IsHide

	// no validation rules for IsKeepAlive

	// no validation rules for IsAffix

	// no validation rules for Permission

	// no validation rules for Status

	// no validation rules for CreateBy

	// no validation rules for UpdateBy

	// no validation rules for Remark

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMenusReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMenusReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMenusReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMenusReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMenusReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMenusReplyValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMenusReplyMultiError(errors)
	}

	return nil
}

// GetMenusReplyMultiError is an error wrapping multiple validation errors
// returned by GetMenusReply.ValidateAll() if the designated constraints
// aren't met.
type GetMenusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMenusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMenusReplyMultiError) AllErrors() []error { return m }

// GetMenusReplyValidationError is the validation error returned by
// GetMenusReply.Validate if the designated constraints aren't met.
type GetMenusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMenusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMenusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMenusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMenusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMenusReplyValidationError) ErrorName() string { return "GetMenusReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetMenusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMenusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMenusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMenusReplyValidationError{}

// Validate checks the field values on ListMenusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListMenusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMenusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMenusRequestMultiError, or nil if none found.
func (m *ListMenusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMenusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MenuName

	// no validation rules for Status

	if len(errors) > 0 {
		return ListMenusRequestMultiError(errors)
	}

	return nil
}

// ListMenusRequestMultiError is an error wrapping multiple validation errors
// returned by ListMenusRequest.ValidateAll() if the designated constraints
// aren't met.
type ListMenusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMenusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMenusRequestMultiError) AllErrors() []error { return m }

// ListMenusRequestValidationError is the validation error returned by
// ListMenusRequest.Validate if the designated constraints aren't met.
type ListMenusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMenusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMenusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMenusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMenusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMenusRequestValidationError) ErrorName() string { return "ListMenusRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListMenusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMenusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMenusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMenusRequestValidationError{}

// Validate checks the field values on ListMenusReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListMenusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMenusReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListMenusReplyMultiError,
// or nil if none found.
func (m *ListMenusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMenusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMenusReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMenusReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMenusReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMenusReplyMultiError(errors)
	}

	return nil
}

// ListMenusReplyMultiError is an error wrapping multiple validation errors
// returned by ListMenusReply.ValidateAll() if the designated constraints
// aren't met.
type ListMenusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMenusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMenusReplyMultiError) AllErrors() []error { return m }

// ListMenusReplyValidationError is the validation error returned by
// ListMenusReply.Validate if the designated constraints aren't met.
type ListMenusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMenusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMenusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMenusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMenusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMenusReplyValidationError) ErrorName() string { return "ListMenusReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListMenusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMenusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMenusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMenusReplyValidationError{}

// Validate checks the field values on GetMenusTreeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMenusTreeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMenusTreeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMenusTreeRequestMultiError, or nil if none found.
func (m *GetMenusTreeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMenusTreeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetMenusTreeRequestMultiError(errors)
	}

	return nil
}

// GetMenusTreeRequestMultiError is an error wrapping multiple validation
// errors returned by GetMenusTreeRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMenusTreeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMenusTreeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMenusTreeRequestMultiError) AllErrors() []error { return m }

// GetMenusTreeRequestValidationError is the validation error returned by
// GetMenusTreeRequest.Validate if the designated constraints aren't met.
type GetMenusTreeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMenusTreeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMenusTreeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMenusTreeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMenusTreeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMenusTreeRequestValidationError) ErrorName() string {
	return "GetMenusTreeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMenusTreeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMenusTreeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMenusTreeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMenusTreeRequestValidationError{}

// Validate checks the field values on GetMenusTreeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMenusTreeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMenusTreeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMenusTreeReplyMultiError, or nil if none found.
func (m *GetMenusTreeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMenusTreeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMenusTreeReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMenusTreeReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMenusTreeReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMenusTreeReplyMultiError(errors)
	}

	return nil
}

// GetMenusTreeReplyMultiError is an error wrapping multiple validation errors
// returned by GetMenusTreeReply.ValidateAll() if the designated constraints
// aren't met.
type GetMenusTreeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMenusTreeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMenusTreeReplyMultiError) AllErrors() []error { return m }

// GetMenusTreeReplyValidationError is the validation error returned by
// GetMenusTreeReply.Validate if the designated constraints aren't met.
type GetMenusTreeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMenusTreeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMenusTreeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMenusTreeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMenusTreeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMenusTreeReplyValidationError) ErrorName() string {
	return "GetMenusTreeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetMenusTreeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMenusTreeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMenusTreeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMenusTreeReplyValidationError{}
