// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dictdata.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateDictDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDictDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictDataRequestMultiError, or nil if none found.
func (m *CreateDictDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DictType

	// no validation rules for DictLabel

	// no validation rules for DictValue

	// no validation rules for DictSort

	// no validation rules for Status

	// no validation rules for Remark

	if len(errors) > 0 {
		return CreateDictDataRequestMultiError(errors)
	}

	return nil
}

// CreateDictDataRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDictDataRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDictDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictDataRequestMultiError) AllErrors() []error { return m }

// CreateDictDataRequestValidationError is the validation error returned by
// CreateDictDataRequest.Validate if the designated constraints aren't met.
type CreateDictDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictDataRequestValidationError) ErrorName() string {
	return "CreateDictDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDictDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictDataRequestValidationError{}

// Validate checks the field values on CreateDictDataReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDictDataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictDataReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictDataReplyMultiError, or nil if none found.
func (m *CreateDictDataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictDataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateDictDataReplyMultiError(errors)
	}

	return nil
}

// CreateDictDataReplyMultiError is an error wrapping multiple validation
// errors returned by CreateDictDataReply.ValidateAll() if the designated
// constraints aren't met.
type CreateDictDataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictDataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictDataReplyMultiError) AllErrors() []error { return m }

// CreateDictDataReplyValidationError is the validation error returned by
// CreateDictDataReply.Validate if the designated constraints aren't met.
type CreateDictDataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictDataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictDataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictDataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictDataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictDataReplyValidationError) ErrorName() string {
	return "CreateDictDataReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDictDataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictDataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictDataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictDataReplyValidationError{}

// Validate checks the field values on UpdateDictDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictDataRequestMultiError, or nil if none found.
func (m *UpdateDictDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DictCode

	// no validation rules for DictSort

	// no validation rules for DictLabel

	// no validation rules for DictValue

	// no validation rules for DictType

	// no validation rules for Status

	// no validation rules for CssClass

	// no validation rules for ListClass

	// no validation rules for IsDefault

	// no validation rules for CreateBy

	// no validation rules for UpdateBy

	// no validation rules for Remark

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDictDataRequestValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDictDataRequestValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDictDataRequestValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDictDataRequestValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDictDataRequestValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDictDataRequestValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDictDataRequestMultiError(errors)
	}

	return nil
}

// UpdateDictDataRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDictDataRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDictDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictDataRequestMultiError) AllErrors() []error { return m }

// UpdateDictDataRequestValidationError is the validation error returned by
// UpdateDictDataRequest.Validate if the designated constraints aren't met.
type UpdateDictDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictDataRequestValidationError) ErrorName() string {
	return "UpdateDictDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictDataRequestValidationError{}

// Validate checks the field values on UpdateDictDataReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictDataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictDataReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictDataReplyMultiError, or nil if none found.
func (m *UpdateDictDataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictDataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DictCode

	if len(errors) > 0 {
		return UpdateDictDataReplyMultiError(errors)
	}

	return nil
}

// UpdateDictDataReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateDictDataReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateDictDataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictDataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictDataReplyMultiError) AllErrors() []error { return m }

// UpdateDictDataReplyValidationError is the validation error returned by
// UpdateDictDataReply.Validate if the designated constraints aren't met.
type UpdateDictDataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictDataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictDataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictDataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictDataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictDataReplyValidationError) ErrorName() string {
	return "UpdateDictDataReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictDataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictDataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictDataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictDataReplyValidationError{}

// Validate checks the field values on DeleteDictDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDictDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDictDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDictDataRequestMultiError, or nil if none found.
func (m *DeleteDictDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDictDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DictCode

	if len(errors) > 0 {
		return DeleteDictDataRequestMultiError(errors)
	}

	return nil
}

// DeleteDictDataRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDictDataRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDictDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDictDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDictDataRequestMultiError) AllErrors() []error { return m }

// DeleteDictDataRequestValidationError is the validation error returned by
// DeleteDictDataRequest.Validate if the designated constraints aren't met.
type DeleteDictDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictDataRequestValidationError) ErrorName() string {
	return "DeleteDictDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDictDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictDataRequestValidationError{}

// Validate checks the field values on DeleteDictDataReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDictDataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDictDataReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDictDataReplyMultiError, or nil if none found.
func (m *DeleteDictDataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDictDataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DictCode

	if len(errors) > 0 {
		return DeleteDictDataReplyMultiError(errors)
	}

	return nil
}

// DeleteDictDataReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteDictDataReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteDictDataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDictDataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDictDataReplyMultiError) AllErrors() []error { return m }

// DeleteDictDataReplyValidationError is the validation error returned by
// DeleteDictDataReply.Validate if the designated constraints aren't met.
type DeleteDictDataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictDataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictDataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictDataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictDataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictDataReplyValidationError) ErrorName() string {
	return "DeleteDictDataReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDictDataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictDataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictDataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictDataReplyValidationError{}

// Validate checks the field values on GetDictDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDictDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDictDataRequestMultiError, or nil if none found.
func (m *GetDictDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DictCode

	if len(errors) > 0 {
		return GetDictDataRequestMultiError(errors)
	}

	return nil
}

// GetDictDataRequestMultiError is an error wrapping multiple validation errors
// returned by GetDictDataRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDictDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictDataRequestMultiError) AllErrors() []error { return m }

// GetDictDataRequestValidationError is the validation error returned by
// GetDictDataRequest.Validate if the designated constraints aren't met.
type GetDictDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictDataRequestValidationError) ErrorName() string {
	return "GetDictDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDictDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictDataRequestValidationError{}

// Validate checks the field values on GetDictDataReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDictDataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictDataReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDictDataReplyMultiError, or nil if none found.
func (m *GetDictDataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictDataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DictCode

	if len(errors) > 0 {
		return GetDictDataReplyMultiError(errors)
	}

	return nil
}

// GetDictDataReplyMultiError is an error wrapping multiple validation errors
// returned by GetDictDataReply.ValidateAll() if the designated constraints
// aren't met.
type GetDictDataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictDataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictDataReplyMultiError) AllErrors() []error { return m }

// GetDictDataReplyValidationError is the validation error returned by
// GetDictDataReply.Validate if the designated constraints aren't met.
type GetDictDataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictDataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictDataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictDataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictDataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictDataReplyValidationError) ErrorName() string { return "GetDictDataReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetDictDataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictDataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictDataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictDataReplyValidationError{}

// Validate checks the field values on ListDictDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDictDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDictDataRequestMultiError, or nil if none found.
func (m *ListDictDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNum

	// no validation rules for PageSize

	// no validation rules for Status

	// no validation rules for DictType

	// no validation rules for DictLabel

	if len(errors) > 0 {
		return ListDictDataRequestMultiError(errors)
	}

	return nil
}

// ListDictDataRequestMultiError is an error wrapping multiple validation
// errors returned by ListDictDataRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDictDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictDataRequestMultiError) AllErrors() []error { return m }

// ListDictDataRequestValidationError is the validation error returned by
// ListDictDataRequest.Validate if the designated constraints aren't met.
type ListDictDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictDataRequestValidationError) ErrorName() string {
	return "ListDictDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDictDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictDataRequestValidationError{}

// Validate checks the field values on ListDictDataReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDictDataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictDataReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDictDataReplyMultiError, or nil if none found.
func (m *ListDictDataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictDataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for PageNum

	// no validation rules for PageSize

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDictDataReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDictDataReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDictDataReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDictDataReplyMultiError(errors)
	}

	return nil
}

// ListDictDataReplyMultiError is an error wrapping multiple validation errors
// returned by ListDictDataReply.ValidateAll() if the designated constraints
// aren't met.
type ListDictDataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictDataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictDataReplyMultiError) AllErrors() []error { return m }

// ListDictDataReplyValidationError is the validation error returned by
// ListDictDataReply.Validate if the designated constraints aren't met.
type ListDictDataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictDataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictDataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictDataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictDataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictDataReplyValidationError) ErrorName() string {
	return "ListDictDataReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListDictDataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictDataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictDataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictDataReplyValidationError{}

// Validate checks the field values on DictDataContent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DictDataContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DictDataContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DictDataContentMultiError, or nil if none found.
func (m *DictDataContent) ValidateAll() error {
	return m.validate(true)
}

func (m *DictDataContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DictCode

	// no validation rules for DictSort

	// no validation rules for DictLabel

	// no validation rules for DictValue

	// no validation rules for DictType

	// no validation rules for Status

	// no validation rules for CssClass

	// no validation rules for ListClass

	// no validation rules for IsDefault

	// no validation rules for CreateBy

	// no validation rules for UpdateBy

	// no validation rules for Remark

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DictDataContentValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DictDataContentValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DictDataContentValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DictDataContentValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DictDataContentValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DictDataContentValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DictDataContentMultiError(errors)
	}

	return nil
}

// DictDataContentMultiError is an error wrapping multiple validation errors
// returned by DictDataContent.ValidateAll() if the designated constraints
// aren't met.
type DictDataContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DictDataContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DictDataContentMultiError) AllErrors() []error { return m }

// DictDataContentValidationError is the validation error returned by
// DictDataContent.Validate if the designated constraints aren't met.
type DictDataContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictDataContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictDataContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictDataContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictDataContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictDataContentValidationError) ErrorName() string { return "DictDataContentValidationError" }

// Error satisfies the builtin error interface
func (e DictDataContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictDataContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictDataContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictDataContentValidationError{}
