// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dept.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RoleDeptTreeSelectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleDeptTreeSelectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleDeptTreeSelectRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleDeptTreeSelectRequestMultiError, or nil if none found.
func (m *RoleDeptTreeSelectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleDeptTreeSelectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return RoleDeptTreeSelectRequestMultiError(errors)
	}

	return nil
}

// RoleDeptTreeSelectRequestMultiError is an error wrapping multiple validation
// errors returned by RoleDeptTreeSelectRequest.ValidateAll() if the
// designated constraints aren't met.
type RoleDeptTreeSelectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleDeptTreeSelectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleDeptTreeSelectRequestMultiError) AllErrors() []error { return m }

// RoleDeptTreeSelectRequestValidationError is the validation error returned by
// RoleDeptTreeSelectRequest.Validate if the designated constraints aren't met.
type RoleDeptTreeSelectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleDeptTreeSelectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleDeptTreeSelectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleDeptTreeSelectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleDeptTreeSelectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleDeptTreeSelectRequestValidationError) ErrorName() string {
	return "RoleDeptTreeSelectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoleDeptTreeSelectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleDeptTreeSelectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleDeptTreeSelectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleDeptTreeSelectRequestValidationError{}

// Validate checks the field values on RoleDeptTreeSelectReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleDeptTreeSelectReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleDeptTreeSelectReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleDeptTreeSelectReplyMultiError, or nil if none found.
func (m *RoleDeptTreeSelectReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleDeptTreeSelectReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDepts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleDeptTreeSelectReplyValidationError{
						field:  fmt.Sprintf("Depts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleDeptTreeSelectReplyValidationError{
						field:  fmt.Sprintf("Depts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleDeptTreeSelectReplyValidationError{
					field:  fmt.Sprintf("Depts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RoleDeptTreeSelectReplyMultiError(errors)
	}

	return nil
}

// RoleDeptTreeSelectReplyMultiError is an error wrapping multiple validation
// errors returned by RoleDeptTreeSelectReply.ValidateAll() if the designated
// constraints aren't met.
type RoleDeptTreeSelectReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleDeptTreeSelectReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleDeptTreeSelectReplyMultiError) AllErrors() []error { return m }

// RoleDeptTreeSelectReplyValidationError is the validation error returned by
// RoleDeptTreeSelectReply.Validate if the designated constraints aren't met.
type RoleDeptTreeSelectReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleDeptTreeSelectReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleDeptTreeSelectReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleDeptTreeSelectReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleDeptTreeSelectReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleDeptTreeSelectReplyValidationError) ErrorName() string {
	return "RoleDeptTreeSelectReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RoleDeptTreeSelectReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleDeptTreeSelectReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleDeptTreeSelectReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleDeptTreeSelectReplyValidationError{}

// Validate checks the field values on DeptLabel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeptLabel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeptLabel with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeptLabelMultiError, or nil
// if none found.
func (m *DeptLabel) ValidateAll() error {
	return m.validate(true)
}

func (m *DeptLabel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeptLabelValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeptLabelValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeptLabelValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DeptId

	// no validation rules for DeptName

	if len(errors) > 0 {
		return DeptLabelMultiError(errors)
	}

	return nil
}

// DeptLabelMultiError is an error wrapping multiple validation errors returned
// by DeptLabel.ValidateAll() if the designated constraints aren't met.
type DeptLabelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeptLabelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeptLabelMultiError) AllErrors() []error { return m }

// DeptLabelValidationError is the validation error returned by
// DeptLabel.Validate if the designated constraints aren't met.
type DeptLabelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeptLabelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeptLabelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeptLabelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeptLabelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeptLabelValidationError) ErrorName() string { return "DeptLabelValidationError" }

// Error satisfies the builtin error interface
func (e DeptLabelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeptLabel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeptLabelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeptLabelValidationError{}

// Validate checks the field values on ListDeptRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDeptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeptRequestMultiError, or nil if none found.
func (m *ListDeptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeptName

	// no validation rules for Status

	// no validation rules for DeptId

	if len(errors) > 0 {
		return ListDeptRequestMultiError(errors)
	}

	return nil
}

// ListDeptRequestMultiError is an error wrapping multiple validation errors
// returned by ListDeptRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDeptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeptRequestMultiError) AllErrors() []error { return m }

// ListDeptRequestValidationError is the validation error returned by
// ListDeptRequest.Validate if the designated constraints aren't met.
type ListDeptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeptRequestValidationError) ErrorName() string { return "ListDeptRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListDeptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeptRequestValidationError{}

// Validate checks the field values on ListDeptReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListDeptReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeptReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListDeptReplyMultiError, or
// nil if none found.
func (m *ListDeptReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeptReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDeptReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDeptReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeptReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDeptReplyMultiError(errors)
	}

	return nil
}

// ListDeptReplyMultiError is an error wrapping multiple validation errors
// returned by ListDeptReply.ValidateAll() if the designated constraints
// aren't met.
type ListDeptReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeptReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeptReplyMultiError) AllErrors() []error { return m }

// ListDeptReplyValidationError is the validation error returned by
// ListDeptReply.Validate if the designated constraints aren't met.
type ListDeptReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeptReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeptReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeptReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeptReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeptReplyValidationError) ErrorName() string { return "ListDeptReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListDeptReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeptReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeptReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeptReplyValidationError{}

// Validate checks the field values on GetDeptTreeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeptTreeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeptTreeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeptTreeRequestMultiError, or nil if none found.
func (m *GetDeptTreeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeptTreeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeptName

	// no validation rules for Status

	// no validation rules for DeptId

	if len(errors) > 0 {
		return GetDeptTreeRequestMultiError(errors)
	}

	return nil
}

// GetDeptTreeRequestMultiError is an error wrapping multiple validation errors
// returned by GetDeptTreeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDeptTreeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeptTreeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeptTreeRequestMultiError) AllErrors() []error { return m }

// GetDeptTreeRequestValidationError is the validation error returned by
// GetDeptTreeRequest.Validate if the designated constraints aren't met.
type GetDeptTreeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeptTreeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeptTreeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeptTreeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeptTreeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeptTreeRequestValidationError) ErrorName() string {
	return "GetDeptTreeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeptTreeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeptTreeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeptTreeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeptTreeRequestValidationError{}

// Validate checks the field values on GetDeptTreeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDeptTreeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeptTreeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeptTreeReplyMultiError, or nil if none found.
func (m *GetDeptTreeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeptTreeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDeptTreeReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDeptTreeReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDeptTreeReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDeptTreeReplyMultiError(errors)
	}

	return nil
}

// GetDeptTreeReplyMultiError is an error wrapping multiple validation errors
// returned by GetDeptTreeReply.ValidateAll() if the designated constraints
// aren't met.
type GetDeptTreeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeptTreeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeptTreeReplyMultiError) AllErrors() []error { return m }

// GetDeptTreeReplyValidationError is the validation error returned by
// GetDeptTreeReply.Validate if the designated constraints aren't met.
type GetDeptTreeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeptTreeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeptTreeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeptTreeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeptTreeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeptTreeReplyValidationError) ErrorName() string { return "GetDeptTreeReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetDeptTreeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeptTreeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeptTreeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeptTreeReplyValidationError{}

// Validate checks the field values on CreateDeptRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDeptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeptRequestMultiError, or nil if none found.
func (m *CreateDeptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParentId

	// no validation rules for DeptName

	// no validation rules for Leader

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Status

	// no validation rules for Sort

	if len(errors) > 0 {
		return CreateDeptRequestMultiError(errors)
	}

	return nil
}

// CreateDeptRequestMultiError is an error wrapping multiple validation errors
// returned by CreateDeptRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateDeptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeptRequestMultiError) AllErrors() []error { return m }

// CreateDeptRequestValidationError is the validation error returned by
// CreateDeptRequest.Validate if the designated constraints aren't met.
type CreateDeptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeptRequestValidationError) ErrorName() string {
	return "CreateDeptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeptRequestValidationError{}

// Validate checks the field values on CreateDeptReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDeptReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeptReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeptReplyMultiError, or nil if none found.
func (m *CreateDeptReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeptReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateDeptReplyMultiError(errors)
	}

	return nil
}

// CreateDeptReplyMultiError is an error wrapping multiple validation errors
// returned by CreateDeptReply.ValidateAll() if the designated constraints
// aren't met.
type CreateDeptReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeptReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeptReplyMultiError) AllErrors() []error { return m }

// CreateDeptReplyValidationError is the validation error returned by
// CreateDeptReply.Validate if the designated constraints aren't met.
type CreateDeptReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeptReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeptReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeptReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeptReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeptReplyValidationError) ErrorName() string { return "CreateDeptReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateDeptReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeptReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeptReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeptReplyValidationError{}

// Validate checks the field values on UpdateDeptRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeptRequestMultiError, or nil if none found.
func (m *UpdateDeptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeptId

	// no validation rules for ParentId

	// no validation rules for DeptName

	// no validation rules for Leader

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Status

	// no validation rules for Sort

	if len(errors) > 0 {
		return UpdateDeptRequestMultiError(errors)
	}

	return nil
}

// UpdateDeptRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateDeptRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateDeptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeptRequestMultiError) AllErrors() []error { return m }

// UpdateDeptRequestValidationError is the validation error returned by
// UpdateDeptRequest.Validate if the designated constraints aren't met.
type UpdateDeptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeptRequestValidationError) ErrorName() string {
	return "UpdateDeptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeptRequestValidationError{}

// Validate checks the field values on UpdateDeptReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeptReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeptReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeptReplyMultiError, or nil if none found.
func (m *UpdateDeptReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeptReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDeptReplyMultiError(errors)
	}

	return nil
}

// UpdateDeptReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateDeptReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateDeptReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeptReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeptReplyMultiError) AllErrors() []error { return m }

// UpdateDeptReplyValidationError is the validation error returned by
// UpdateDeptReply.Validate if the designated constraints aren't met.
type UpdateDeptReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeptReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeptReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeptReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeptReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeptReplyValidationError) ErrorName() string { return "UpdateDeptReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateDeptReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeptReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeptReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeptReplyValidationError{}

// Validate checks the field values on DeleteDeptRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeptRequestMultiError, or nil if none found.
func (m *DeleteDeptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteDeptRequestMultiError(errors)
	}

	return nil
}

// DeleteDeptRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteDeptRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteDeptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeptRequestMultiError) AllErrors() []error { return m }

// DeleteDeptRequestValidationError is the validation error returned by
// DeleteDeptRequest.Validate if the designated constraints aren't met.
type DeleteDeptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeptRequestValidationError) ErrorName() string {
	return "DeleteDeptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeptRequestValidationError{}

// Validate checks the field values on DeleteDeptReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeptReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeptReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeptReplyMultiError, or nil if none found.
func (m *DeleteDeptReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeptReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDeptReplyMultiError(errors)
	}

	return nil
}

// DeleteDeptReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteDeptReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteDeptReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeptReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeptReplyMultiError) AllErrors() []error { return m }

// DeleteDeptReplyValidationError is the validation error returned by
// DeleteDeptReply.Validate if the designated constraints aren't met.
type DeleteDeptReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeptReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeptReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeptReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeptReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeptReplyValidationError) ErrorName() string { return "DeleteDeptReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteDeptReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeptReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeptReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeptReplyValidationError{}
