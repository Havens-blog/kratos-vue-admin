// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 为某个枚举单独设置错误码
func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == SysUserErrorReason_USER_NOT_FOUND.String() && e.Code == 404
}

// 为某个枚举单独设置错误码
func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, SysUserErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsContentMissing(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == SysUserErrorReason_CONTENT_MISSING.String() && e.Code == 400
}

func ErrorContentMissing(format string, args ...interface{}) *errors.Error {
	return errors.New(400, SysUserErrorReason_CONTENT_MISSING.String(), fmt.Sprintf(format, args...))
}

func IsLoginFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == SysUserErrorReason_LOGIN_FAIL.String() && e.Code == 400
}

func ErrorLoginFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, SysUserErrorReason_LOGIN_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsCaptchaInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == SysUserErrorReason_CAPTCHA_INVALID.String() && e.Code == 400
}

func ErrorCaptchaInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, SysUserErrorReason_CAPTCHA_INVALID.String(), fmt.Sprintf(format, args...))
}

func IsInternalErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == SysUserErrorReason_INTERNAL_ERR.String() && e.Code == 500
}

func ErrorInternalErr(format string, args ...interface{}) *errors.Error {
	return errors.New(500, SysUserErrorReason_INTERNAL_ERR.String(), fmt.Sprintf(format, args...))
}

func IsCodeNotMatch(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == SysUserErrorReason_CODE_NOT_MATCH.String() && e.Code == 400
}

func ErrorCodeNotMatch(format string, args ...interface{}) *errors.Error {
	return errors.New(400, SysUserErrorReason_CODE_NOT_MATCH.String(), fmt.Sprintf(format, args...))
}

func IsDatabaseErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == SysUserErrorReason_DATABASE_ERR.String() && e.Code == 500
}

func ErrorDatabaseErr(format string, args ...interface{}) *errors.Error {
	return errors.New(500, SysUserErrorReason_DATABASE_ERR.String(), fmt.Sprintf(format, args...))
}

func IsTentcentApi(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == SysUserErrorReason_TENTCENT_API.String() && e.Code == 200
}

func ErrorTentcentApi(format string, args ...interface{}) *errors.Error {
	return errors.New(200, SysUserErrorReason_TENTCENT_API.String(), fmt.Sprintf(format, args...))
}

func IsBizErrorApi(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == SysUserErrorReason_BizError_API.String() && e.Code == 204
}

func ErrorBizErrorApi(format string, args ...interface{}) *errors.Error {
	return errors.New(204, SysUserErrorReason_BizError_API.String(), fmt.Sprintf(format, args...))
}

func IsAccountForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == SysUserErrorReason_ACCOUNT_FORBIDDEN.String() && e.Code == 200
}

func ErrorAccountForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(200, SysUserErrorReason_ACCOUNT_FORBIDDEN.String(), fmt.Sprintf(format, args...))
}

func IsRoleBindAccount(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == SysUserErrorReason_ROLE_BIND_ACCOUNT.String() && e.Code == 200
}

func ErrorRoleBindAccount(format string, args ...interface{}) *errors.Error {
	return errors.New(200, SysUserErrorReason_ROLE_BIND_ACCOUNT.String(), fmt.Sprintf(format, args...))
}

func IsAccountExisted(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == SysUserErrorReason_ACCOUNT_EXISTED.String() && e.Code == 200
}

func ErrorAccountExisted(format string, args ...interface{}) *errors.Error {
	return errors.New(200, SysUserErrorReason_ACCOUNT_EXISTED.String(), fmt.Sprintf(format, args...))
}
