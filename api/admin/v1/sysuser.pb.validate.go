// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sysuser.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateSysuserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSysuserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSysuserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSysuserRequestMultiError, or nil if none found.
func (m *CreateSysuserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSysuserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetNickName()); l < 1 || l > 30 {
		err := CreateSysuserRequestValidationError{
			field:  "NickName",
			reason: "value length must be between 1 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 30 {
		err := CreateSysuserRequestValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 1 || l > 30 {
		err := CreateSysuserRequestValidationError{
			field:  "Password",
			reason: "value length must be between 1 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Sex

	// no validation rules for DeptId

	// no validation rules for Status

	// no validation rules for Remark

	// no validation rules for PostId

	// no validation rules for RoleId

	// no validation rules for PostIds

	// no validation rules for RoleIds

	// no validation rules for Avatar

	if utf8.RuneCountInString(m.GetSecret()) != 32 {
		err := CreateSysuserRequestValidationError{
			field:  "Secret",
			reason: "value length must be 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return CreateSysuserRequestMultiError(errors)
	}

	return nil
}

// CreateSysuserRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSysuserRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSysuserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSysuserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSysuserRequestMultiError) AllErrors() []error { return m }

// CreateSysuserRequestValidationError is the validation error returned by
// CreateSysuserRequest.Validate if the designated constraints aren't met.
type CreateSysuserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSysuserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSysuserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSysuserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSysuserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSysuserRequestValidationError) ErrorName() string {
	return "CreateSysuserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSysuserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSysuserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSysuserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSysuserRequestValidationError{}

// Validate checks the field values on CreateSysuserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSysuserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSysuserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSysuserReplyMultiError, or nil if none found.
func (m *CreateSysuserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSysuserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateSysuserReplyMultiError(errors)
	}

	return nil
}

// CreateSysuserReplyMultiError is an error wrapping multiple validation errors
// returned by CreateSysuserReply.ValidateAll() if the designated constraints
// aren't met.
type CreateSysuserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSysuserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSysuserReplyMultiError) AllErrors() []error { return m }

// CreateSysuserReplyValidationError is the validation error returned by
// CreateSysuserReply.Validate if the designated constraints aren't met.
type CreateSysuserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSysuserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSysuserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSysuserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSysuserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSysuserReplyValidationError) ErrorName() string {
	return "CreateSysuserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSysuserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSysuserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSysuserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSysuserReplyValidationError{}

// Validate checks the field values on UpdateSysuserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSysuserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSysuserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSysuserRequestMultiError, or nil if none found.
func (m *UpdateSysuserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSysuserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for NickName

	// no validation rules for Phone

	// no validation rules for RoleId

	// no validation rules for Salt

	// no validation rules for Avatar

	// no validation rules for Sex

	// no validation rules for Email

	// no validation rules for DeptId

	// no validation rules for PostId

	// no validation rules for RoleIds

	// no validation rules for PostIds

	// no validation rules for CreateBy

	// no validation rules for UpdateBy

	// no validation rules for Remark

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSysuserRequestValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSysuserRequestValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSysuserRequestValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSysuserRequestValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSysuserRequestValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSysuserRequestValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for RoleName

	// no validation rules for Secret

	if len(errors) > 0 {
		return UpdateSysuserRequestMultiError(errors)
	}

	return nil
}

// UpdateSysuserRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateSysuserRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateSysuserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSysuserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSysuserRequestMultiError) AllErrors() []error { return m }

// UpdateSysuserRequestValidationError is the validation error returned by
// UpdateSysuserRequest.Validate if the designated constraints aren't met.
type UpdateSysuserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSysuserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSysuserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSysuserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSysuserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSysuserRequestValidationError) ErrorName() string {
	return "UpdateSysuserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSysuserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSysuserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSysuserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSysuserRequestValidationError{}

// Validate checks the field values on UpdateSysuserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSysuserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSysuserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSysuserReplyMultiError, or nil if none found.
func (m *UpdateSysuserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSysuserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSysuserReplyMultiError(errors)
	}

	return nil
}

// UpdateSysuserReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateSysuserReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateSysuserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSysuserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSysuserReplyMultiError) AllErrors() []error { return m }

// UpdateSysuserReplyValidationError is the validation error returned by
// UpdateSysuserReply.Validate if the designated constraints aren't met.
type UpdateSysuserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSysuserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSysuserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSysuserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSysuserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSysuserReplyValidationError) ErrorName() string {
	return "UpdateSysuserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSysuserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSysuserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSysuserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSysuserReplyValidationError{}

// Validate checks the field values on DeleteSysuserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSysuserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSysuserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSysuserRequestMultiError, or nil if none found.
func (m *DeleteSysuserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSysuserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteSysuserRequestMultiError(errors)
	}

	return nil
}

// DeleteSysuserRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSysuserRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSysuserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSysuserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSysuserRequestMultiError) AllErrors() []error { return m }

// DeleteSysuserRequestValidationError is the validation error returned by
// DeleteSysuserRequest.Validate if the designated constraints aren't met.
type DeleteSysuserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSysuserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSysuserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSysuserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSysuserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSysuserRequestValidationError) ErrorName() string {
	return "DeleteSysuserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSysuserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSysuserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSysuserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSysuserRequestValidationError{}

// Validate checks the field values on DeleteSysuserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSysuserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSysuserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSysuserReplyMultiError, or nil if none found.
func (m *DeleteSysuserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSysuserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSysuserReplyMultiError(errors)
	}

	return nil
}

// DeleteSysuserReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteSysuserReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteSysuserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSysuserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSysuserReplyMultiError) AllErrors() []error { return m }

// DeleteSysuserReplyValidationError is the validation error returned by
// DeleteSysuserReply.Validate if the designated constraints aren't met.
type DeleteSysuserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSysuserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSysuserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSysuserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSysuserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSysuserReplyValidationError) ErrorName() string {
	return "DeleteSysuserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSysuserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSysuserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSysuserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSysuserReplyValidationError{}

// Validate checks the field values on GetSysuserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSysuserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysuserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSysuserRequestMultiError, or nil if none found.
func (m *GetSysuserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysuserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSysuserRequestMultiError(errors)
	}

	return nil
}

// GetSysuserRequestMultiError is an error wrapping multiple validation errors
// returned by GetSysuserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSysuserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysuserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysuserRequestMultiError) AllErrors() []error { return m }

// GetSysuserRequestValidationError is the validation error returned by
// GetSysuserRequest.Validate if the designated constraints aren't met.
type GetSysuserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysuserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysuserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysuserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysuserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysuserRequestValidationError) ErrorName() string {
	return "GetSysuserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSysuserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysuserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysuserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysuserRequestValidationError{}

// Validate checks the field values on GetSysuserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSysuserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysuserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSysuserReplyMultiError, or nil if none found.
func (m *GetSysuserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysuserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSysuserReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSysuserReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSysuserReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSysuserReplyValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSysuserReplyValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSysuserReplyValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSysuserReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSysuserReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSysuserReplyValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDepts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSysuserReplyValidationError{
						field:  fmt.Sprintf("Depts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSysuserReplyValidationError{
						field:  fmt.Sprintf("Depts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSysuserReplyValidationError{
					field:  fmt.Sprintf("Depts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PostIds

	// no validation rules for RoleIds

	if len(errors) > 0 {
		return GetSysuserReplyMultiError(errors)
	}

	return nil
}

// GetSysuserReplyMultiError is an error wrapping multiple validation errors
// returned by GetSysuserReply.ValidateAll() if the designated constraints
// aren't met.
type GetSysuserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysuserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysuserReplyMultiError) AllErrors() []error { return m }

// GetSysuserReplyValidationError is the validation error returned by
// GetSysuserReply.Validate if the designated constraints aren't met.
type GetSysuserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysuserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysuserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysuserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysuserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysuserReplyValidationError) ErrorName() string { return "GetSysuserReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetSysuserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysuserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysuserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysuserReplyValidationError{}

// Validate checks the field values on ListSysuserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSysuserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysuserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSysuserRequestMultiError, or nil if none found.
func (m *ListSysuserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysuserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNum

	// no validation rules for PageSize

	// no validation rules for Username

	// no validation rules for Phone

	// no validation rules for Status

	if len(errors) > 0 {
		return ListSysuserRequestMultiError(errors)
	}

	return nil
}

// ListSysuserRequestMultiError is an error wrapping multiple validation errors
// returned by ListSysuserRequest.ValidateAll() if the designated constraints
// aren't met.
type ListSysuserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysuserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysuserRequestMultiError) AllErrors() []error { return m }

// ListSysuserRequestValidationError is the validation error returned by
// ListSysuserRequest.Validate if the designated constraints aren't met.
type ListSysuserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysuserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysuserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysuserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysuserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysuserRequestValidationError) ErrorName() string {
	return "ListSysuserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSysuserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysuserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysuserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysuserRequestValidationError{}

// Validate checks the field values on ListSysuserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSysuserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysuserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSysuserReplyMultiError, or nil if none found.
func (m *ListSysuserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysuserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for PageNum

	// no validation rules for PageSize

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSysuserReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSysuserReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSysuserReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSysuserReplyMultiError(errors)
	}

	return nil
}

// ListSysuserReplyMultiError is an error wrapping multiple validation errors
// returned by ListSysuserReply.ValidateAll() if the designated constraints
// aren't met.
type ListSysuserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysuserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysuserReplyMultiError) AllErrors() []error { return m }

// ListSysuserReplyValidationError is the validation error returned by
// ListSysuserReply.Validate if the designated constraints aren't met.
type ListSysuserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysuserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysuserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysuserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysuserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysuserReplyValidationError) ErrorName() string { return "ListSysuserReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListSysuserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysuserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysuserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysuserReplyValidationError{}

// Validate checks the field values on GetCaptchaRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCaptchaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCaptchaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCaptchaRequestMultiError, or nil if none found.
func (m *GetCaptchaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCaptchaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCaptchaRequestMultiError(errors)
	}

	return nil
}

// GetCaptchaRequestMultiError is an error wrapping multiple validation errors
// returned by GetCaptchaRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCaptchaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCaptchaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCaptchaRequestMultiError) AllErrors() []error { return m }

// GetCaptchaRequestValidationError is the validation error returned by
// GetCaptchaRequest.Validate if the designated constraints aren't met.
type GetCaptchaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCaptchaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCaptchaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCaptchaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCaptchaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCaptchaRequestValidationError) ErrorName() string {
	return "GetCaptchaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCaptchaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCaptchaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCaptchaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCaptchaRequestValidationError{}

// Validate checks the field values on GetCaptchaReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCaptchaReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCaptchaReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCaptchaReplyMultiError, or nil if none found.
func (m *GetCaptchaReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCaptchaReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Base64Captcha

	// no validation rules for CaptchaId

	// no validation rules for Content

	if len(errors) > 0 {
		return GetCaptchaReplyMultiError(errors)
	}

	return nil
}

// GetCaptchaReplyMultiError is an error wrapping multiple validation errors
// returned by GetCaptchaReply.ValidateAll() if the designated constraints
// aren't met.
type GetCaptchaReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCaptchaReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCaptchaReplyMultiError) AllErrors() []error { return m }

// GetCaptchaReplyValidationError is the validation error returned by
// GetCaptchaReply.Validate if the designated constraints aren't met.
type GetCaptchaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCaptchaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCaptchaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCaptchaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCaptchaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCaptchaReplyValidationError) ErrorName() string { return "GetCaptchaReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetCaptchaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCaptchaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCaptchaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCaptchaReplyValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Code

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReplyMultiError, or
// nil if none found.
func (m *LoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Expire

	if len(errors) > 0 {
		return LoginReplyMultiError(errors)
	}

	return nil
}

// LoginReplyMultiError is an error wrapping multiple validation errors
// returned by LoginReply.ValidateAll() if the designated constraints aren't met.
type LoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReplyMultiError) AllErrors() []error { return m }

// LoginReplyValidationError is the validation error returned by
// LoginReply.Validate if the designated constraints aren't met.
type LoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReplyValidationError) ErrorName() string { return "LoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReplyValidationError{}

// Validate checks the field values on LogoutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRequestMultiError, or
// nil if none found.
func (m *LogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutRequestMultiError(errors)
	}

	return nil
}

// LogoutRequestMultiError is an error wrapping multiple validation errors
// returned by LogoutRequest.ValidateAll() if the designated constraints
// aren't met.
type LogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRequestMultiError) AllErrors() []error { return m }

// LogoutRequestValidationError is the validation error returned by
// LogoutRequest.Validate if the designated constraints aren't met.
type LogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRequestValidationError) ErrorName() string { return "LogoutRequestValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRequestValidationError{}

// Validate checks the field values on LogoutReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutReplyMultiError, or
// nil if none found.
func (m *LogoutReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutReplyMultiError(errors)
	}

	return nil
}

// LogoutReplyMultiError is an error wrapping multiple validation errors
// returned by LogoutReply.ValidateAll() if the designated constraints aren't met.
type LogoutReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutReplyMultiError) AllErrors() []error { return m }

// LogoutReplyValidationError is the validation error returned by
// LogoutReply.Validate if the designated constraints aren't met.
type LogoutReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutReplyValidationError) ErrorName() string { return "LogoutReplyValidationError" }

// Error satisfies the builtin error interface
func (e LogoutReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutReplyValidationError{}

// Validate checks the field values on AuthRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthRequestMultiError, or
// nil if none found.
func (m *AuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	if len(errors) > 0 {
		return AuthRequestMultiError(errors)
	}

	return nil
}

// AuthRequestMultiError is an error wrapping multiple validation errors
// returned by AuthRequest.ValidateAll() if the designated constraints aren't met.
type AuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthRequestMultiError) AllErrors() []error { return m }

// AuthRequestValidationError is the validation error returned by
// AuthRequest.Validate if the designated constraints aren't met.
type AuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthRequestValidationError) ErrorName() string { return "AuthRequestValidationError" }

// Error satisfies the builtin error interface
func (e AuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthRequestValidationError{}

// Validate checks the field values on AuthReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthReplyMultiError, or nil
// if none found.
func (m *AuthReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthReplyValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthReplyValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthReplyValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMenus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthReplyValidationError{
						field:  fmt.Sprintf("Menus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthReplyValidationError{
						field:  fmt.Sprintf("Menus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthReplyValidationError{
					field:  fmt.Sprintf("Menus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AuthReplyMultiError(errors)
	}

	return nil
}

// AuthReplyMultiError is an error wrapping multiple validation errors returned
// by AuthReply.ValidateAll() if the designated constraints aren't met.
type AuthReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthReplyMultiError) AllErrors() []error { return m }

// AuthReplyValidationError is the validation error returned by
// AuthReply.Validate if the designated constraints aren't met.
type AuthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthReplyValidationError) ErrorName() string { return "AuthReplyValidationError" }

// Error satisfies the builtin error interface
func (e AuthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthReplyValidationError{}

// Validate checks the field values on ChangeStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeStatusRequestMultiError, or nil if none found.
func (m *ChangeStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Status

	if len(errors) > 0 {
		return ChangeStatusRequestMultiError(errors)
	}

	return nil
}

// ChangeStatusRequestMultiError is an error wrapping multiple validation
// errors returned by ChangeStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeStatusRequestMultiError) AllErrors() []error { return m }

// ChangeStatusRequestValidationError is the validation error returned by
// ChangeStatusRequest.Validate if the designated constraints aren't met.
type ChangeStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeStatusRequestValidationError) ErrorName() string {
	return "ChangeStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeStatusRequestValidationError{}

// Validate checks the field values on ChangeStatusReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangeStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeStatusReplyMultiError, or nil if none found.
func (m *ChangeStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeStatusReplyMultiError(errors)
	}

	return nil
}

// ChangeStatusReplyMultiError is an error wrapping multiple validation errors
// returned by ChangeStatusReply.ValidateAll() if the designated constraints
// aren't met.
type ChangeStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeStatusReplyMultiError) AllErrors() []error { return m }

// ChangeStatusReplyValidationError is the validation error returned by
// ChangeStatusReply.Validate if the designated constraints aren't met.
type ChangeStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeStatusReplyValidationError) ErrorName() string {
	return "ChangeStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeStatusReplyValidationError{}

// Validate checks the field values on UpdatePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePasswordRequestMultiError, or nil if none found.
func (m *UpdatePasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NewPassword

	// no validation rules for OldPassword

	if len(errors) > 0 {
		return UpdatePasswordRequestMultiError(errors)
	}

	return nil
}

// UpdatePasswordRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePasswordRequestMultiError) AllErrors() []error { return m }

// UpdatePasswordRequestValidationError is the validation error returned by
// UpdatePasswordRequest.Validate if the designated constraints aren't met.
type UpdatePasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePasswordRequestValidationError) ErrorName() string {
	return "UpdatePasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePasswordRequestValidationError{}

// Validate checks the field values on UpdatePasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePasswordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePasswordReplyMultiError, or nil if none found.
func (m *UpdatePasswordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePasswordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePasswordReplyMultiError(errors)
	}

	return nil
}

// UpdatePasswordReplyMultiError is an error wrapping multiple validation
// errors returned by UpdatePasswordReply.ValidateAll() if the designated
// constraints aren't met.
type UpdatePasswordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePasswordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePasswordReplyMultiError) AllErrors() []error { return m }

// UpdatePasswordReplyValidationError is the validation error returned by
// UpdatePasswordReply.Validate if the designated constraints aren't met.
type UpdatePasswordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePasswordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePasswordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePasswordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePasswordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePasswordReplyValidationError) ErrorName() string {
	return "UpdatePasswordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePasswordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePasswordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePasswordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePasswordReplyValidationError{}

// Validate checks the field values on GetPostInitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPostInitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostInitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPostInitRequestMultiError, or nil if none found.
func (m *GetPostInitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostInitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPostInitRequestMultiError(errors)
	}

	return nil
}

// GetPostInitRequestMultiError is an error wrapping multiple validation errors
// returned by GetPostInitRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPostInitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostInitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostInitRequestMultiError) AllErrors() []error { return m }

// GetPostInitRequestValidationError is the validation error returned by
// GetPostInitRequest.Validate if the designated constraints aren't met.
type GetPostInitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostInitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostInitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostInitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostInitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostInitRequestValidationError) ErrorName() string {
	return "GetPostInitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostInitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostInitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostInitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostInitRequestValidationError{}

// Validate checks the field values on GetPostInitReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPostInitReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostInitReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPostInitReplyMultiError, or nil if none found.
func (m *GetPostInitReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostInitReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPostInitReplyValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPostInitReplyValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPostInitReplyValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPostInitReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPostInitReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPostInitReplyValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPostInitReplyMultiError(errors)
	}

	return nil
}

// GetPostInitReplyMultiError is an error wrapping multiple validation errors
// returned by GetPostInitReply.ValidateAll() if the designated constraints
// aren't met.
type GetPostInitReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostInitReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostInitReplyMultiError) AllErrors() []error { return m }

// GetPostInitReplyValidationError is the validation error returned by
// GetPostInitReply.Validate if the designated constraints aren't met.
type GetPostInitReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostInitReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostInitReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostInitReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostInitReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostInitReplyValidationError) ErrorName() string { return "GetPostInitReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetPostInitReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostInitReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostInitReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostInitReplyValidationError{}

// Validate checks the field values on GetUserRolePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserRolePostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRolePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserRolePostRequestMultiError, or nil if none found.
func (m *GetUserRolePostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRolePostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserRolePostRequestMultiError(errors)
	}

	return nil
}

// GetUserRolePostRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserRolePostRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserRolePostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRolePostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRolePostRequestMultiError) AllErrors() []error { return m }

// GetUserRolePostRequestValidationError is the validation error returned by
// GetUserRolePostRequest.Validate if the designated constraints aren't met.
type GetUserRolePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRolePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRolePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRolePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRolePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRolePostRequestValidationError) ErrorName() string {
	return "GetUserRolePostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserRolePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRolePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRolePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRolePostRequestValidationError{}

// Validate checks the field values on GetUserRolePostReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserRolePostReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRolePostReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserRolePostReplyMultiError, or nil if none found.
func (m *GetUserRolePostReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRolePostReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserRolePostReplyValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserRolePostReplyValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserRolePostReplyValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserRolePostReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserRolePostReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserRolePostReplyValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserRolePostReplyMultiError(errors)
	}

	return nil
}

// GetUserRolePostReplyMultiError is an error wrapping multiple validation
// errors returned by GetUserRolePostReply.ValidateAll() if the designated
// constraints aren't met.
type GetUserRolePostReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRolePostReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRolePostReplyMultiError) AllErrors() []error { return m }

// GetUserRolePostReplyValidationError is the validation error returned by
// GetUserRolePostReply.Validate if the designated constraints aren't met.
type GetUserRolePostReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRolePostReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRolePostReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRolePostReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRolePostReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRolePostReplyValidationError) ErrorName() string {
	return "GetUserRolePostReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserRolePostReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRolePostReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRolePostReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRolePostReplyValidationError{}

// Validate checks the field values on GetUserGoogleSecretRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserGoogleSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserGoogleSecretRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserGoogleSecretRequestMultiError, or nil if none found.
func (m *GetUserGoogleSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserGoogleSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserGoogleSecretRequestMultiError(errors)
	}

	return nil
}

// GetUserGoogleSecretRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserGoogleSecretRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUserGoogleSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserGoogleSecretRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserGoogleSecretRequestMultiError) AllErrors() []error { return m }

// GetUserGoogleSecretRequestValidationError is the validation error returned
// by GetUserGoogleSecretRequest.Validate if the designated constraints aren't met.
type GetUserGoogleSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserGoogleSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserGoogleSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserGoogleSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserGoogleSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserGoogleSecretRequestValidationError) ErrorName() string {
	return "GetUserGoogleSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserGoogleSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserGoogleSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserGoogleSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserGoogleSecretRequestValidationError{}

// Validate checks the field values on GetUserGoogleSecretReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserGoogleSecretReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserGoogleSecretReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserGoogleSecretReplyMultiError, or nil if none found.
func (m *GetUserGoogleSecretReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserGoogleSecretReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Secret

	// no validation rules for Qrcode

	if len(errors) > 0 {
		return GetUserGoogleSecretReplyMultiError(errors)
	}

	return nil
}

// GetUserGoogleSecretReplyMultiError is an error wrapping multiple validation
// errors returned by GetUserGoogleSecretReply.ValidateAll() if the designated
// constraints aren't met.
type GetUserGoogleSecretReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserGoogleSecretReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserGoogleSecretReplyMultiError) AllErrors() []error { return m }

// GetUserGoogleSecretReplyValidationError is the validation error returned by
// GetUserGoogleSecretReply.Validate if the designated constraints aren't met.
type GetUserGoogleSecretReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserGoogleSecretReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserGoogleSecretReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserGoogleSecretReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserGoogleSecretReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserGoogleSecretReplyValidationError) ErrorName() string {
	return "GetUserGoogleSecretReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserGoogleSecretReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserGoogleSecretReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserGoogleSecretReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserGoogleSecretReplyValidationError{}

// Validate checks the field values on AuthReply_User with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthReply_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthReply_User with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthReply_UserMultiError,
// or nil if none found.
func (m *AuthReply_User) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthReply_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for NickName

	// no validation rules for Phone

	// no validation rules for RoleId

	// no validation rules for Salt

	// no validation rules for Avatar

	// no validation rules for Sex

	// no validation rules for Email

	// no validation rules for DeptId

	// no validation rules for PostId

	// no validation rules for RoleIds

	// no validation rules for PostIds

	// no validation rules for CreateBy

	// no validation rules for UpdateBy

	// no validation rules for Remark

	// no validation rules for Status

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for RoleName

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthReply_UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthReply_UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthReply_UserValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthReply_UserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthReply_UserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthReply_UserValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthReply_UserMultiError(errors)
	}

	return nil
}

// AuthReply_UserMultiError is an error wrapping multiple validation errors
// returned by AuthReply_User.ValidateAll() if the designated constraints
// aren't met.
type AuthReply_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthReply_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthReply_UserMultiError) AllErrors() []error { return m }

// AuthReply_UserValidationError is the validation error returned by
// AuthReply_User.Validate if the designated constraints aren't met.
type AuthReply_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthReply_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthReply_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthReply_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthReply_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthReply_UserValidationError) ErrorName() string { return "AuthReply_UserValidationError" }

// Error satisfies the builtin error interface
func (e AuthReply_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthReply_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthReply_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthReply_UserValidationError{}

// Validate checks the field values on AuthReply_Role with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthReply_Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthReply_Role with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthReply_RoleMultiError,
// or nil if none found.
func (m *AuthReply_Role) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthReply_Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for RoleName

	// no validation rules for Status

	// no validation rules for RoleKey

	// no validation rules for RoleSort

	// no validation rules for DataScope

	// no validation rules for CreateBy

	// no validation rules for UpdateBy

	// no validation rules for Remark

	if all {
		switch v := interface{}(m.GetApiIds()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthReply_RoleValidationError{
					field:  "ApiIds",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthReply_RoleValidationError{
					field:  "ApiIds",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApiIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthReply_RoleValidationError{
				field:  "ApiIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMenuIds()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthReply_RoleValidationError{
					field:  "MenuIds",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthReply_RoleValidationError{
					field:  "MenuIds",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMenuIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthReply_RoleValidationError{
				field:  "MenuIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeptIds()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthReply_RoleValidationError{
					field:  "DeptIds",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthReply_RoleValidationError{
					field:  "DeptIds",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeptIds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthReply_RoleValidationError{
				field:  "DeptIds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthReply_RoleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthReply_RoleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthReply_RoleValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthReply_RoleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthReply_RoleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthReply_RoleValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthReply_RoleMultiError(errors)
	}

	return nil
}

// AuthReply_RoleMultiError is an error wrapping multiple validation errors
// returned by AuthReply_Role.ValidateAll() if the designated constraints
// aren't met.
type AuthReply_RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthReply_RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthReply_RoleMultiError) AllErrors() []error { return m }

// AuthReply_RoleValidationError is the validation error returned by
// AuthReply_Role.Validate if the designated constraints aren't met.
type AuthReply_RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthReply_RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthReply_RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthReply_RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthReply_RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthReply_RoleValidationError) ErrorName() string { return "AuthReply_RoleValidationError" }

// Error satisfies the builtin error interface
func (e AuthReply_RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthReply_Role.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthReply_RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthReply_RoleValidationError{}
